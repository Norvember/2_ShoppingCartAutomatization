{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-09T09:06:58.766Z",
    "end": "2025-04-09T09:07:30.581Z",
    "duration": 31815,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e5e9ccd0-0569-4493-9323-791a0ef91575",
      "title": "",
      "fullFile": "F:\\Software Development\\JavasScript\\Selenium IDE\\ShoppingCartAutomatization\\tests\\addItemsToCart.js",
      "file": "\\tests\\addItemsToCart.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc0daa95-4d93-448b-9c43-516ffde5f900",
          "title": "Add Items to Cart Test",
          "fullFile": "F:\\Software Development\\JavasScript\\Selenium IDE\\ShoppingCartAutomatization\\tests\\addItemsToCart.js",
          "file": "\\tests\\addItemsToCart.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Items to Cart Test\"",
              "fullTitle": "Add Items to Cart Test \"before all\" hook in \"Add Items to Cart Test\"",
              "timedOut": null,
              "duration": 1259,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "5d856242-6ab7-4f72-a282-d643b271db7e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Add Items to Cart Test\"",
              "fullTitle": "Add Items to Cart Test \"after all\" hook in \"Add Items to Cart Test\"",
              "timedOut": null,
              "duration": 89,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "0d422915-6d4b-4dff-bc59-a55f6a324526",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add 3 random items to the cart and verify them",
              "fullTitle": "Add Items to Cart Test should add 3 random items to the cart and verify them",
              "timedOut": null,
              "duration": 30071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"ðŸ›’ Cart Summary\",\n  \"value\": \"ðŸ›’ Items in the cart:\\n1. Price: â‚¬1439.00, Name: NeÅ¡iojamas kompiuteris Asus TUF Gaming A15 FA507NVR-HQ096W, AMD Ryzen 7 7435HS, 16 GB, 1 TB, 15.6 \\\", NVIDIA GeForce RTX 4060, pilka, en, Link: https://www.1a.lt/p/nesiojamas-kompiuteris-asus-tuf-gaming-a15-fa507nvr-hq096w-amd-ryzen-7-7435hs-16-gb-1-tb-15-6-nvidia-geforce-rtx-4060-pilka-en/u6yd\\n2. Price: â‚¬579.00, Name: NeÅ¡iojamas kompiuteris HP Laptop 17-cp2009ny, AMD Ryzenâ„¢ 3 7320U, 8 GB, 256 GB, 17.3 \\\", AMD Radeon Graphics, sidabro, en, Link: https://www.1a.lt/p/nesiojamas-kompiuteris-hp-laptop-17-cp2009ny-amd-ryzen-3-7320u-8-gb-256-gb-17-3-amd-radeon-graphics-sidabro-en/t6k4\\n3. Price: â‚¬739.00, Name: NeÅ¡iojamas kompiuteris Asus TUF A15 90NR0JU7-M001A0, AMD Ryzen 7-7435HS (3.1 GHz, 4.5 GHz Turbo, 16 MB Cache), 16 GB, 512 GB, 15.6 \\\", Nvidia GeForce RTX 2050, juoda, anglÅ³ (us), Link: https://www.1a.lt/p/nesiojamas-kompiuteris-asus-tuf-a15-90nr0ju7-m001a0-amd-ryzen-7-7435hs-3-1-ghz-4-5-ghz-turbo-16-mb-cache-16-gb-512-gb-15-6-nvidia-geforce-rtx-2050-juoda-anglu-us/u4cm\\nðŸ’° Total sum of items: â‚¬2757.00\"\n}",
              "code": "const chai = await import('chai');\nconst should = chai.should();\nconst searchKeyword = \"laptop\";\nconst websiteUrl = \"https://www.1a.lt\";\n// Navigate to the website\nawait driver.get(websiteUrl);\n// Search for the keyword\nconst searchBox = await driver.findElement(By.css('input[name=\"q\"]'));\nawait searchBox.sendKeys(searchKeyword, Key.RETURN);\n// Wait for search results to load\nawait driver.wait(until.elementLocated(By.css('.lupa-search-result-product-card')), 10000);\nawait driver.sleep(quickSleep); // Additional wait to ensure all items are loaded\nconst items = await driver.findElements(By.css('.lupa-search-result-product-card'));\nitems.length.should.be.gte(10, 'At least 10 items should be found in the search results.');\nconst topItems = items.slice(0, 10);\n// Randomly select 3 items from the top 10\nconst selectedItems = [];\nwhile (selectedItems.length < 3) {\n    const randomIndex = Math.floor(Math.random() * topItems.length);\n    if (!selectedItems.includes(randomIndex)) {\n        selectedItems.push(randomIndex);\n    }\n}\n// Add the selected items to the cart\nfor (const index of selectedItems) {\n    const item = topItems[index];\n    // Hover over the item card to display the \"Add to Cart\" button\n    await driver.actions().move({ origin: item }).perform();\n    // Locate the \"Add to Cart\" button\n    const addToCartButton = await item.findElement(By.css('.catalog-taxons-buy-button__button'));\n    await addToCartButton.click();\n    await driver.sleep(4000); // Wait for the item to be added to the cart\n    // Wait for the cart confirmation popup to appear\n    await driver.wait(until.elementLocated(By.css('#cart-popup-container')), 10000);\n    const closePopupButton = await driver.findElement(By.css('.fancybox-close-small'));\n    await closePopupButton.click();\n    await driver.sleep(quickSleep); // Wait for the popup to close\n}\n// Navigate to the cart page\nawait driver.get(`${websiteUrl}/cart`);\n// Retrieve the names, prices, and links of items in the cart\nconst cartItems = await driver.findElements(By.css('.detailed-cart-item'));\ncartItems.length.should.equal(3, 'There should be exactly 3 items in the cart.');\nconst cartDetails = [];\nlet totalSum = 0;\nfor (const cartItem of cartItems) {\n    const nameElement = await cartItem.findElement(By.css('.detailed-cart-item__name-link'));\n    const name = await nameElement.getText();\n    const link = await nameElement.getAttribute('href');\n    // Get the price element and extract the text\n    const priceElement = await cartItem.findElement(By.css('.detailed-cart-item__price'));\n    const priceText = await priceElement.getText();\n    // Parse the price: remove currency symbols, replace comma with dot for decimals\n    const numericPrice = parseFloat(priceText.replace(/[^\\d,.-]/g, '').replace(',', '.'));\n    totalSum += numericPrice;\n    cartDetails.push({ name, link, price: numericPrice });\n}\n// Output the cart details and attach to Mocha report\nconst cartSummaryLines = [];\ncartSummaryLines.push(\"ðŸ›’ Items in the cart:\");\ncartDetails.forEach((item, index) => {\n    cartSummaryLines.push(`${index + 1}. Price: â‚¬${item.price.toFixed(2)}, Name: ${item.name}, Link: ${item.link}`);\n});\ncartSummaryLines.push(`ðŸ’° Total sum of items: â‚¬${totalSum.toFixed(2)}`);\nconst cartSummary = cartSummaryLines.join('\\n');\nconsole.log(cartSummary);\n// Attach to Mocha context for Mochawesome\nthis.test.context = {\n    title: 'ðŸ›’ Cart Summary',\n    value: cartSummary\n};\n// Verify that cart details are not empty\ncartDetails.forEach(item => {\n    item.name.should.not.be.empty;\n    item.link.should.not.be.empty;\n});",
              "err": {},
              "uuid": "fbf78f39-b0c5-4e21-8939-8f65cedcafd2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fbf78f39-b0c5-4e21-8939-8f65cedcafd2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30071,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testReports",
        "": true
      },
      "version": "6.2.0"
    }
  }
}